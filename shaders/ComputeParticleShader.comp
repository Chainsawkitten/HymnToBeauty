#version 430 compatibility
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout( binding=0 ) buffer Pos
{
    vec4 Positions[];
};

layout(binding = 1) buffer Vel
{
    vec4 Velocities[];
};

layout(binding = 2) buffer Col
{
    vec4 Colors[];
};


layout(local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

uniform vec2 ShootIndex;
uniform float timer;
uniform float rate;
uniform vec3 Velocity;
uniform float lifetime;
uniform float speed;
uniform float alphaControl;
uniform float mass;
uniform vec3[32] randomVec;
uniform vec3 worldPosition;
uniform int nr_particles;

void main(void) {
    const float DT = 0.1;
    const vec3 G = vec3(0.0, -9.8, 0.0);
    
    uint index = gl_GlobalInvocationID.x;
    
    if (index > nr_particles)
        return;
    	
    float life = Velocities[index].w;
    float shot = Positions[index].w;
    
    vec3 p = Positions[index].xyz;
    vec3 v = Velocities[index].xyz;
    
    vec4 color = Colors[index];
    
    if (index >= ShootIndex.x && index <= ShootIndex.y) {
        shot = 1.0;
    	v = vec3(speed * (randomVec[index - int(ShootIndex.x)] + Velocity));
    	p = worldPosition;
    	color.w = 0.7;
    }
    
    if (shot == 1.0) {
    	color.w -= DT/alphaControl;
        life += DT;
    	
        v += Velocity + mass * G * DT;
    
        p += vec3(v) * DT;
    }
    
    if (life > lifetime) {
    	color.w = 0.0;
        life = 0.0;
        shot = 0.0;
        p = worldPosition;
        v = vec3(speed * (randomVec[0] + Velocity));
    	color.w = 0.0f;
    }
    
    Positions[index] = vec4(p, shot);
    Velocities[index] = vec4(v.xyz, life);
    Colors[index] = color;
}
