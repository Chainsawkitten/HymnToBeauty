/*

*/

precision mediump int;
precision mediump float;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

STORAGE_BUFFER_RW(0)
{
    highp float offsets[];
} offsetBuffer;

STORAGE_BUFFER(1)
{
    vec2 positions[];
} instances;

UNIFORMS
{
    uint planeDivisions;
    uint offsetInstances;
} uniforms;

void main() {
    if (any(greaterThan(gl_GlobalInvocationID, uvec3(uniforms.planeDivisions, uniforms.planeDivisions, 1u)))) {
        return;
    }

    float offset = 0.0;
    vec2 pos = vec2(gl_GlobalInvocationID.xy) / float(uniforms.planeDivisions);
    
    for (uint i = 0u; i < uniforms.offsetInstances; ++i) {
        offset += 1.0 - min(length(pos - instances.positions[i]), 1.0);
    }
    
    offsetBuffer.offsets[gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * uniforms.planeDivisions] = offset;
}
