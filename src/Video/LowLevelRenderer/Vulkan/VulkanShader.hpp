#pragma once

#include "../Interface/Shader.hpp"

#include <vulkan/vulkan.h>
#include <ShaderProcessor/ShaderSource.hpp>

namespace Video {

/// Vulkan implementation of Shader.
class VulkanShader : public Shader {
  public:
    /// Create new Vulkan shader.
    /**
     * @param device Vulkan device.
     * @param shaderSource The source of the shader, generated by the shader processor.
     * @param type The type of shader to create.
     */
    VulkanShader(VkDevice device, const ShaderSource& shaderSource, Type type);

    /// Destructor.
    ~VulkanShader() final;

    /// Get the Vulkan shader module.
    /**
     * @return The Vulkan shader module.
     */
    VkShaderModule GetShaderModule() const;

    /// Get the shader stage.
    /**
     * @return The shader stage.
     */
    VkShaderStageFlagBits GetShaderStage() const;

    /// Get reflection info.
    /**
     * @return The reflection info generated by the shader processor.
     */
    const ShaderSource::ReflectionInfo& GetReflectionInfo() const;

  private:
    VulkanShader(const VulkanShader& other) = delete;

    VkDevice device;
    VkShaderModule shaderModule;
    VkShaderStageFlagBits shaderStage;

    ShaderSource::ReflectionInfo reflectionInfo;
};

}
